/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { Consent } from "../model/Consent"
import { GetAccessRightResponse } from "../model/GetAccessRightResponse"
import { GetPatientAuditTrailResponse } from "../model/GetPatientAuditTrailResponse"
import { HcPartyConsentDto } from "../model/HcPartyConsentDto"
import { Kmehrmessage } from "../model/Kmehrmessage"
import { Patient } from "../model/Patient"
import { PutAccessRightResponse } from "../model/PutAccessRightResponse"
import { PutPatientConsentResponse } from "../model/PutPatientConsentResponse"
import { PutTherapeuticLinkResponse } from "../model/PutTherapeuticLinkResponse"
import { PutTransactionResponseDto } from "../model/PutTransactionResponseDto"
import { PutTransactionSetResponse } from "../model/PutTransactionSetResponse"
import { RevokeAccessRightResponse } from "../model/RevokeAccessRightResponse"
import { RevokePatientConsentResponse } from "../model/RevokePatientConsentResponse"
import { RevokeTherapeuticLinkResponse } from "../model/RevokeTherapeuticLinkResponse"
import { TherapeuticLinkMessageDto } from "../model/TherapeuticLinkMessageDto"
import { TransactionSummaryDto } from "../model/TransactionSummaryDto"

export class fhcHubApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary convertKmehrXMLtoJSON
   * @param body message
   */
  convertKmehrXMLtoJSONUsingPOST(body?: string): Promise<Kmehrmessage> {
    let _body = null
    _body = body

    const _url = this.host + `/hub/convertKmehrXMLtoJSON` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/xml"))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Kmehrmessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getAccessRight
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param sv sv
   * @param sl sl
   * @param value value
   * @param hubPackageId hubPackageId
   */
  getAccessRightUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    sv: string,
    sl: string,
    value: string,
    hubPackageId?: string
  ): Promise<GetAccessRightResponse> {
    let _body = null

    const _url =
      this.host +
      `/hub/access` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (sv ? "&sv=" + encodeURIComponent(String(sv)) : "") +
      (sl ? "&sl=" + encodeURIComponent(String(sl)) : "") +
      (value ? "&value=" + encodeURIComponent(String(value)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new GetAccessRightResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getHcpConsent
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param hubPackageId hubPackageId
   */
  getHcpConsentUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpSsin: string,
    hcpZip: string,
    hubPackageId?: string
  ): Promise<HcPartyConsentDto> {
    let _body = null

    const _url =
      this.host +
      `/hub/hcpconsent/${encodeURIComponent(String(hcpNihii))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new HcPartyConsentDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getPatientAuditTrail
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param hubPackageId hubPackageId
   * @param from from
   * @param to to
   * @param authorNihii authorNihii
   * @param authorSsin authorSsin
   * @param isGlobal isGlobal
   * @param breakTheGlassReason breakTheGlassReason
   * @param ssin ssin
   * @param sv sv
   * @param sl sl
   * @param id id
   */
  getPatientAuditTrailUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    hubPackageId?: string,
    from?: number,
    to?: number,
    authorNihii?: string,
    authorSsin?: string,
    isGlobal?: boolean,
    breakTheGlassReason?: string,
    ssin?: string,
    sv?: string,
    sl?: string,
    id?: string
  ): Promise<GetPatientAuditTrailResponse> {
    let _body = null

    const _url =
      this.host +
      `/hub/trail` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (from ? "&from=" + encodeURIComponent(String(from)) : "") +
      (to ? "&to=" + encodeURIComponent(String(to)) : "") +
      (authorNihii ? "&authorNihii=" + encodeURIComponent(String(authorNihii)) : "") +
      (authorSsin ? "&authorSsin=" + encodeURIComponent(String(authorSsin)) : "") +
      (isGlobal ? "&isGlobal=" + encodeURIComponent(String(isGlobal)) : "") +
      (breakTheGlassReason
        ? "&breakTheGlassReason=" + encodeURIComponent(String(breakTheGlassReason))
        : "") +
      (ssin ? "&ssin=" + encodeURIComponent(String(ssin)) : "") +
      (sv ? "&sv=" + encodeURIComponent(String(sv)) : "") +
      (sl ? "&sl=" + encodeURIComponent(String(sl)) : "") +
      (id ? "&id=" + encodeURIComponent(String(id)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new GetPatientAuditTrailResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getPatientConsent
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   */
  getPatientConsentUsingGET1(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    hubPackageId?: string
  ): Promise<Consent> {
    let _body = null

    const _url =
      this.host +
      `/hub/consent/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Consent(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getPatient
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   */
  getPatientUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    hubPackageId?: string
  ): Promise<Patient> {
    let _body = null

    const _url =
      this.host +
      `/hub/patient/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Patient(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getTherapeuticLinks
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   * @param therLinkType therLinkType
   * @param from from
   * @param to to
   */
  getTherapeuticLinksUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    hubPackageId?: string,
    therLinkType?: string,
    from?: number,
    to?: number
  ): Promise<TherapeuticLinkMessageDto> {
    let _body = null

    const _url =
      this.host +
      `/hub/therlink/${encodeURIComponent(String(hcpNihii))}/${encodeURIComponent(
        String(patientSsin)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (therLinkType ? "&therLinkType=" + encodeURIComponent(String(therLinkType)) : "") +
      (from ? "&from=" + encodeURIComponent(String(from)) : "") +
      (to ? "&to=" + encodeURIComponent(String(to)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new TherapeuticLinkMessageDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getTransactionMessage
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param ssin ssin
   * @param sv sv
   * @param sl sl
   * @param id id
   * @param hubPackageId hubPackageId
   * @param breakTheGlassReason breakTheGlassReason
   * @param externalHubId externalHubId
   * @param externalHubName externalHubName
   */
  getTransactionMessageUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    ssin: string,
    sv: string,
    sl: string,
    id: string,
    hubPackageId?: string,
    breakTheGlassReason?: string,
    externalHubId?: string,
    externalHubName?: string
  ): Promise<Kmehrmessage> {
    let _body = null

    const _url =
      this.host +
      `/hub/t/${encodeURIComponent(String(ssin))}/${encodeURIComponent(
        String(sv)
      )}/${encodeURIComponent(String(sl))}/kmehr` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (id ? "&id=" + encodeURIComponent(String(id)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (breakTheGlassReason
        ? "&breakTheGlassReason=" + encodeURIComponent(String(breakTheGlassReason))
        : "") +
      (externalHubId ? "&externalHubId=" + encodeURIComponent(String(externalHubId)) : "") +
      (externalHubName ? "&externalHubName=" + encodeURIComponent(String(externalHubName)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Kmehrmessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getTransactionSetMessage
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param ssin ssin
   * @param sv sv
   * @param sl sl
   * @param id id
   * @param hubPackageId hubPackageId
   * @param breakTheGlassReason breakTheGlassReason
   * @param externalHubId externalHubId
   * @param externalHubName externalHubName
   */
  getTransactionSetMessageUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    ssin: string,
    sv: string,
    sl: string,
    id: string,
    hubPackageId?: string,
    breakTheGlassReason?: string,
    externalHubId?: string,
    externalHubName?: string
  ): Promise<Kmehrmessage> {
    let _body = null

    const _url =
      this.host +
      `/hub/ts/${encodeURIComponent(String(ssin))}/${encodeURIComponent(
        String(sv)
      )}/${encodeURIComponent(String(sl))}/kmehr` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (id ? "&id=" + encodeURIComponent(String(id)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (breakTheGlassReason
        ? "&breakTheGlassReason=" + encodeURIComponent(String(breakTheGlassReason))
        : "") +
      (externalHubId ? "&externalHubId=" + encodeURIComponent(String(externalHubId)) : "") +
      (externalHubName ? "&externalHubName=" + encodeURIComponent(String(externalHubName)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Kmehrmessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getTransactionSet
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param ssin ssin
   * @param sv sv
   * @param sl sl
   * @param id id
   * @param hubPackageId hubPackageId
   * @param breakTheGlassReason breakTheGlassReason
   * @param externalHubId externalHubId
   * @param externalHubName externalHubName
   */
  getTransactionSetUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    ssin: string,
    sv: string,
    sl: string,
    id: string,
    hubPackageId?: string,
    breakTheGlassReason?: string,
    externalHubId?: string,
    externalHubName?: string
  ): Promise<Kmehrmessage> {
    let _body = null

    const _url =
      this.host +
      `/hub/ts/${encodeURIComponent(String(ssin))}/${encodeURIComponent(
        String(sv)
      )}/${encodeURIComponent(String(sl))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (id ? "&id=" + encodeURIComponent(String(id)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (breakTheGlassReason
        ? "&breakTheGlassReason=" + encodeURIComponent(String(breakTheGlassReason))
        : "") +
      (externalHubId ? "&externalHubId=" + encodeURIComponent(String(externalHubId)) : "") +
      (externalHubName ? "&externalHubName=" + encodeURIComponent(String(externalHubName)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Kmehrmessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getTransaction
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param ssin ssin
   * @param sv sv
   * @param sl sl
   * @param id id
   * @param hubPackageId hubPackageId
   * @param breakTheGlassReason breakTheGlassReason
   * @param externalHubId externalHubId
   * @param externalHubName externalHubName
   */
  getTransactionUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    ssin: string,
    sv: string,
    sl: string,
    id: string,
    hubPackageId?: string,
    breakTheGlassReason?: string,
    externalHubId?: string,
    externalHubName?: string
  ): Promise<Kmehrmessage> {
    let _body = null

    const _url =
      this.host +
      `/hub/t/${encodeURIComponent(String(ssin))}/${encodeURIComponent(
        String(sv)
      )}/${encodeURIComponent(String(sl))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (id ? "&id=" + encodeURIComponent(String(id)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (breakTheGlassReason
        ? "&breakTheGlassReason=" + encodeURIComponent(String(breakTheGlassReason))
        : "") +
      (externalHubId ? "&externalHubId=" + encodeURIComponent(String(externalHubId)) : "") +
      (externalHubName ? "&externalHubName=" + encodeURIComponent(String(externalHubName)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Kmehrmessage(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getTransactionsList
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   * @param from from
   * @param to to
   * @param authorNihii authorNihii
   * @param authorSsin authorSsin
   * @param isGlobal isGlobal
   * @param breakTheGlassReason breakTheGlassReason
   */
  getTransactionsListUsingGET(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    hubPackageId?: string,
    from?: number,
    to?: number,
    authorNihii?: string,
    authorSsin?: string,
    isGlobal?: boolean,
    breakTheGlassReason?: string
  ): Promise<Array<TransactionSummaryDto>> {
    let _body = null

    const _url =
      this.host +
      `/hub/list/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (from ? "&from=" + encodeURIComponent(String(from)) : "") +
      (to ? "&to=" + encodeURIComponent(String(to)) : "") +
      (authorNihii ? "&authorNihii=" + encodeURIComponent(String(authorNihii)) : "") +
      (authorSsin ? "&authorSsin=" + encodeURIComponent(String(authorSsin)) : "") +
      (isGlobal ? "&isGlobal=" + encodeURIComponent(String(isGlobal)) : "") +
      (breakTheGlassReason
        ? "&breakTheGlassReason=" + encodeURIComponent(String(breakTheGlassReason))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => (doc.body as Array<JSON>).map(it => new TransactionSummaryDto(it)))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary putAccessRight
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param sv sv
   * @param sl sl
   * @param value value
   * @param accessRight accessRight
   * @param accessNihii accessNihii
   * @param accessSsin accessSsin
   * @param hubPackageId hubPackageId
   */
  putAccessRightUsingPOST(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    sv: string,
    sl: string,
    value: string,
    accessRight: string,
    accessNihii?: string,
    accessSsin?: string,
    hubPackageId?: string
  ): Promise<PutAccessRightResponse> {
    let _body = null

    const _url =
      this.host +
      `/hub/access` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (sv ? "&sv=" + encodeURIComponent(String(sv)) : "") +
      (sl ? "&sl=" + encodeURIComponent(String(sl)) : "") +
      (value ? "&value=" + encodeURIComponent(String(value)) : "") +
      (accessRight ? "&accessRight=" + encodeURIComponent(String(accessRight)) : "") +
      (accessNihii ? "&accessNihii=" + encodeURIComponent(String(accessNihii)) : "") +
      (accessSsin ? "&accessSsin=" + encodeURIComponent(String(accessSsin)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new PutAccessRightResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary putPatient
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param firstName firstName
   * @param lastName lastName
   * @param gender gender
   * @param dateOfBirth dateOfBirth
   * @param hubPackageId hubPackageId
   */
  putPatientUsingPOST(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    firstName: string,
    lastName: string,
    gender: string,
    dateOfBirth: number,
    hubPackageId?: string
  ): Promise<Patient> {
    let _body = null

    const _url =
      this.host +
      `/hub/patient/${encodeURIComponent(String(lastName))}/${encodeURIComponent(
        String(patientSsin)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (firstName ? "&firstName=" + encodeURIComponent(String(firstName)) : "") +
      (gender ? "&gender=" + encodeURIComponent(String(gender)) : "") +
      (dateOfBirth ? "&dateOfBirth=" + encodeURIComponent(String(dateOfBirth)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Patient(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary putTransactionSet
   * @param body message
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param hubId hubId
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   * @param hubApplication hubApplication
   */
  putTransactionSetUsingPOST(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    hubId: number,
    patientSsin: string,
    hubPackageId?: string,
    hubApplication?: string,
    body?: string
  ): Promise<PutTransactionSetResponse> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/hub/ts/${encodeURIComponent(String(hubId))}/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (hubApplication ? "&hubApplication=" + encodeURIComponent(String(hubApplication)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/xml"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new PutTransactionSetResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary putTransaction
   * @param body message
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param hubId hubId
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   * @param hubApplication hubApplication
   */
  putTransactionUsingPOST(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    hubId: number,
    patientSsin: string,
    hubPackageId?: string,
    hubApplication?: string,
    body?: string
  ): Promise<PutTransactionResponseDto> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/hub/t/${encodeURIComponent(String(hubId))}/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (hubApplication ? "&hubApplication=" + encodeURIComponent(String(hubApplication)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/xml"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new PutTransactionResponseDto(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary registerPatientConsent
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   * @param patientEidCardNumber patientEidCardNumber
   * @param patientIsiCardNumber patientIsiCardNumber
   */
  registerPatientConsentUsingPOST1(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    hubPackageId?: string,
    patientEidCardNumber?: string,
    patientIsiCardNumber?: string
  ): Promise<PutPatientConsentResponse> {
    let _body = null

    const _url =
      this.host +
      `/hub/consent/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (patientEidCardNumber
        ? "&patientEidCardNumber=" + encodeURIComponent(String(patientEidCardNumber))
        : "") +
      (patientIsiCardNumber
        ? "&patientIsiCardNumber=" + encodeURIComponent(String(patientIsiCardNumber))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new PutPatientConsentResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary registerTherapeuticLink
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   * @param patientEidCardNumber patientEidCardNumber
   * @param patientIsiCardNumber patientIsiCardNumber
   * @param from from
   * @param to to
   */
  registerTherapeuticLinkUsingPOST(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    hubPackageId?: string,
    patientEidCardNumber?: string,
    patientIsiCardNumber?: string,
    from?: number,
    to?: number
  ): Promise<PutTherapeuticLinkResponse> {
    let _body = null

    const _url =
      this.host +
      `/hub/therlink/${encodeURIComponent(String(hcpNihii))}/${encodeURIComponent(
        String(patientSsin)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (patientEidCardNumber
        ? "&patientEidCardNumber=" + encodeURIComponent(String(patientEidCardNumber))
        : "") +
      (patientIsiCardNumber
        ? "&patientIsiCardNumber=" + encodeURIComponent(String(patientIsiCardNumber))
        : "") +
      (from ? "&from=" + encodeURIComponent(String(from)) : "") +
      (to ? "&to=" + encodeURIComponent(String(to)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new PutTherapeuticLinkResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary revokeAccessRight
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param sv sv
   * @param sl sl
   * @param value value
   * @param accessNihii accessNihii
   * @param accessSsin accessSsin
   * @param hubPackageId hubPackageId
   */
  revokeAccessRightUsingDELETE(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    sv: string,
    sl: string,
    value: string,
    accessNihii?: string,
    accessSsin?: string,
    hubPackageId?: string
  ): Promise<RevokeAccessRightResponse> {
    let _body = null

    const _url =
      this.host +
      `/hub/access` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (sv ? "&sv=" + encodeURIComponent(String(sv)) : "") +
      (sl ? "&sl=" + encodeURIComponent(String(sl)) : "") +
      (value ? "&value=" + encodeURIComponent(String(value)) : "") +
      (accessNihii ? "&accessNihii=" + encodeURIComponent(String(accessNihii)) : "") +
      (accessSsin ? "&accessSsin=" + encodeURIComponent(String(accessSsin)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new RevokeAccessRightResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary revokePatientConsent
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   * @param patientEidCardNumber patientEidCardNumber
   * @param patientIsiCardNumber patientIsiCardNumber
   */
  revokePatientConsentUsingDELETE(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    hubPackageId?: string,
    patientEidCardNumber?: string,
    patientIsiCardNumber?: string
  ): Promise<RevokePatientConsentResponse> {
    let _body = null

    const _url =
      this.host +
      `/hub/consent/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (patientEidCardNumber
        ? "&patientEidCardNumber=" + encodeURIComponent(String(patientEidCardNumber))
        : "") +
      (patientIsiCardNumber
        ? "&patientIsiCardNumber=" + encodeURIComponent(String(patientIsiCardNumber))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new RevokePatientConsentResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary revokeTherapeuticLink
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param patientSsin patientSsin
   * @param hubPackageId hubPackageId
   * @param patientEidCardNumber patientEidCardNumber
   * @param patientIsiCardNumber patientIsiCardNumber
   */
  revokeTherapeuticLinkUsingDELETE(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    patientSsin: string,
    hubPackageId?: string,
    patientEidCardNumber?: string,
    patientIsiCardNumber?: string
  ): Promise<RevokeTherapeuticLinkResponse> {
    let _body = null

    const _url =
      this.host +
      `/hub/therlink/${encodeURIComponent(String(hcpNihii))}/${encodeURIComponent(
        String(patientSsin)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (patientEidCardNumber
        ? "&patientEidCardNumber=" + encodeURIComponent(String(patientEidCardNumber))
        : "") +
      (patientIsiCardNumber
        ? "&patientIsiCardNumber=" + encodeURIComponent(String(patientIsiCardNumber))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new RevokeTherapeuticLinkResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary revokeTransaction
   * @param endpoint endpoint
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpLastName hcpLastName
   * @param hcpFirstName hcpFirstName
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpZip hcpZip
   * @param ssin ssin
   * @param sv sv
   * @param sl sl
   * @param id id
   * @param hubPackageId hubPackageId
   * @param breakTheGlassReason breakTheGlassReason
   */
  revokeTransactionUsingDELETE(
    endpoint: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpLastName: string,
    hcpFirstName: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpZip: string,
    ssin: string,
    sv: string,
    sl: string,
    id: string,
    hubPackageId?: string,
    breakTheGlassReason?: string
  ): Promise<string> {
    let _body = null

    const _url =
      this.host +
      `/hub/t/${encodeURIComponent(String(ssin))}/${encodeURIComponent(
        String(sv)
      )}/${encodeURIComponent(String(sl))}` +
      "?ts=" +
      new Date().getTime() +
      (endpoint ? "&endpoint=" + encodeURIComponent(String(endpoint)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpZip ? "&hcpZip=" + encodeURIComponent(String(hcpZip)) : "") +
      (id ? "&id=" + encodeURIComponent(String(id)) : "") +
      (hubPackageId ? "&hubPackageId=" + encodeURIComponent(String(hubPackageId)) : "") +
      (breakTheGlassReason
        ? "&breakTheGlassReason=" + encodeURIComponent(String(breakTheGlassReason))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
}
