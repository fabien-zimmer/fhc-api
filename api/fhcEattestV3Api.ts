/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { Eattest } from "../model/Eattest"
import { SendAttestResult } from "../model/SendAttestResult"
import { SendAttestResultWithResponse } from "../model/SendAttestResultWithResponse"

export class fhcEattestV3Api {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary cancelAttest
   * @param patientSsin patientSsin
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param hcpCbe hcpCbe
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param eAttestRef eAttestRef
   * @param reason reason
   * @param date date
   * @param traineeSupervisorSsin traineeSupervisorSsin
   * @param traineeSupervisorNihii traineeSupervisorNihii
   * @param traineeSupervisorFirstName traineeSupervisorFirstName
   * @param traineeSupervisorLastName traineeSupervisorLastName
   */
  cancelAttestUsingDELETE1(
    patientSsin: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    hcpCbe: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    eAttestRef: string,
    reason: string,
    date?: number,
    traineeSupervisorSsin?: string,
    traineeSupervisorNihii?: string,
    traineeSupervisorFirstName?: string,
    traineeSupervisorLastName?: string
  ): Promise<SendAttestResult> {
    let _body = null

    const _url =
      this.host +
      `/eattestv3/send/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpCbe ? "&hcpCbe=" + encodeURIComponent(String(hcpCbe)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (eAttestRef ? "&eAttestRef=" + encodeURIComponent(String(eAttestRef)) : "") +
      (reason ? "&reason=" + encodeURIComponent(String(reason)) : "") +
      (date ? "&date=" + encodeURIComponent(String(date)) : "") +
      (traineeSupervisorSsin
        ? "&traineeSupervisorSsin=" + encodeURIComponent(String(traineeSupervisorSsin))
        : "") +
      (traineeSupervisorNihii
        ? "&traineeSupervisorNihii=" + encodeURIComponent(String(traineeSupervisorNihii))
        : "") +
      (traineeSupervisorFirstName
        ? "&traineeSupervisorFirstName=" + encodeURIComponent(String(traineeSupervisorFirstName))
        : "") +
      (traineeSupervisorLastName
        ? "&traineeSupervisorLastName=" + encodeURIComponent(String(traineeSupervisorLastName))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new SendAttestResult(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary cancelAttestWithResponse
   * @param patientSsin patientSsin
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param hcpCbe hcpCbe
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param eAttestRef eAttestRef
   * @param reason reason
   * @param date date
   * @param traineeSupervisorSsin traineeSupervisorSsin
   * @param traineeSupervisorNihii traineeSupervisorNihii
   * @param traineeSupervisorFirstName traineeSupervisorFirstName
   * @param traineeSupervisorLastName traineeSupervisorLastName
   */
  cancelAttestWithResponseUsingDELETE1(
    patientSsin: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    hcpCbe: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    eAttestRef: string,
    reason: string,
    date?: number,
    traineeSupervisorSsin?: string,
    traineeSupervisorNihii?: string,
    traineeSupervisorFirstName?: string,
    traineeSupervisorLastName?: string
  ): Promise<SendAttestResultWithResponse> {
    let _body = null

    const _url =
      this.host +
      `/eattestv3/send/${encodeURIComponent(String(patientSsin))}/verbose` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpCbe ? "&hcpCbe=" + encodeURIComponent(String(hcpCbe)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (eAttestRef ? "&eAttestRef=" + encodeURIComponent(String(eAttestRef)) : "") +
      (reason ? "&reason=" + encodeURIComponent(String(reason)) : "") +
      (date ? "&date=" + encodeURIComponent(String(date)) : "") +
      (traineeSupervisorSsin
        ? "&traineeSupervisorSsin=" + encodeURIComponent(String(traineeSupervisorSsin))
        : "") +
      (traineeSupervisorNihii
        ? "&traineeSupervisorNihii=" + encodeURIComponent(String(traineeSupervisorNihii))
        : "") +
      (traineeSupervisorFirstName
        ? "&traineeSupervisorFirstName=" + encodeURIComponent(String(traineeSupervisorFirstName))
        : "") +
      (traineeSupervisorLastName
        ? "&traineeSupervisorLastName=" + encodeURIComponent(String(traineeSupervisorLastName))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new SendAttestResultWithResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary sendAttest
   * @param body attest
   * @param patientSsin patientSsin
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param hcpCbe hcpCbe
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param date date
   * @param treatmentReason treatmentReason
   * @param traineeSupervisorSsin traineeSupervisorSsin
   * @param traineeSupervisorNihii traineeSupervisorNihii
   * @param traineeSupervisorFirstName traineeSupervisorFirstName
   * @param traineeSupervisorLastName traineeSupervisorLastName
   * @param guardPostNihii guardPostNihii
   * @param guardPostSsin guardPostSsin
   * @param guardPostName guardPostName
   * @param attemptNbr attemptNbr
   */
  sendAttestUsingPOST2(
    patientSsin: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    hcpCbe: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    date?: number,
    treatmentReason?: string,
    traineeSupervisorSsin?: string,
    traineeSupervisorNihii?: string,
    traineeSupervisorFirstName?: string,
    traineeSupervisorLastName?: string,
    guardPostNihii?: string,
    guardPostSsin?: string,
    guardPostName?: string,
    attemptNbr?: number,
    body?: Eattest
  ): Promise<SendAttestResult> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/eattestv3/send/${encodeURIComponent(String(patientSsin))}` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpCbe ? "&hcpCbe=" + encodeURIComponent(String(hcpCbe)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (date ? "&date=" + encodeURIComponent(String(date)) : "") +
      (treatmentReason ? "&treatmentReason=" + encodeURIComponent(String(treatmentReason)) : "") +
      (traineeSupervisorSsin
        ? "&traineeSupervisorSsin=" + encodeURIComponent(String(traineeSupervisorSsin))
        : "") +
      (traineeSupervisorNihii
        ? "&traineeSupervisorNihii=" + encodeURIComponent(String(traineeSupervisorNihii))
        : "") +
      (traineeSupervisorFirstName
        ? "&traineeSupervisorFirstName=" + encodeURIComponent(String(traineeSupervisorFirstName))
        : "") +
      (traineeSupervisorLastName
        ? "&traineeSupervisorLastName=" + encodeURIComponent(String(traineeSupervisorLastName))
        : "") +
      (guardPostNihii ? "&guardPostNihii=" + encodeURIComponent(String(guardPostNihii)) : "") +
      (guardPostSsin ? "&guardPostSsin=" + encodeURIComponent(String(guardPostSsin)) : "") +
      (guardPostName ? "&guardPostName=" + encodeURIComponent(String(guardPostName)) : "") +
      (attemptNbr ? "&attemptNbr=" + encodeURIComponent(String(attemptNbr)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new SendAttestResult(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary sendAttestWithResponse
   * @param body attest
   * @param patientSsin patientSsin
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param hcpCbe hcpCbe
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param date date
   * @param treatmentReason treatmentReason
   * @param traineeSupervisorSsin traineeSupervisorSsin
   * @param traineeSupervisorNihii traineeSupervisorNihii
   * @param traineeSupervisorFirstName traineeSupervisorFirstName
   * @param traineeSupervisorLastName traineeSupervisorLastName
   * @param guardPostNihii guardPostNihii
   * @param guardPostSsin guardPostSsin
   * @param guardPostName guardPostName
   * @param attemptNbr attemptNbr
   */
  sendAttestWithResponseUsingPOST2(
    patientSsin: string,
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    hcpCbe: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    date?: number,
    treatmentReason?: string,
    traineeSupervisorSsin?: string,
    traineeSupervisorNihii?: string,
    traineeSupervisorFirstName?: string,
    traineeSupervisorLastName?: string,
    guardPostNihii?: string,
    guardPostSsin?: string,
    guardPostName?: string,
    attemptNbr?: number,
    body?: Eattest
  ): Promise<SendAttestResultWithResponse> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/eattestv3/send/${encodeURIComponent(String(patientSsin))}/verbose` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (hcpCbe ? "&hcpCbe=" + encodeURIComponent(String(hcpCbe)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (date ? "&date=" + encodeURIComponent(String(date)) : "") +
      (treatmentReason ? "&treatmentReason=" + encodeURIComponent(String(treatmentReason)) : "") +
      (traineeSupervisorSsin
        ? "&traineeSupervisorSsin=" + encodeURIComponent(String(traineeSupervisorSsin))
        : "") +
      (traineeSupervisorNihii
        ? "&traineeSupervisorNihii=" + encodeURIComponent(String(traineeSupervisorNihii))
        : "") +
      (traineeSupervisorFirstName
        ? "&traineeSupervisorFirstName=" + encodeURIComponent(String(traineeSupervisorFirstName))
        : "") +
      (traineeSupervisorLastName
        ? "&traineeSupervisorLastName=" + encodeURIComponent(String(traineeSupervisorLastName))
        : "") +
      (guardPostNihii ? "&guardPostNihii=" + encodeURIComponent(String(guardPostNihii)) : "") +
      (guardPostSsin ? "&guardPostSsin=" + encodeURIComponent(String(guardPostSsin)) : "") +
      (guardPostName ? "&guardPostName=" + encodeURIComponent(String(guardPostName)) : "") +
      (attemptNbr ? "&attemptNbr=" + encodeURIComponent(String(attemptNbr)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new SendAttestResultWithResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
