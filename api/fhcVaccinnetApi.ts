/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { AddVaccinationsResponseType } from "../model/AddVaccinationsResponseType"
import { GetVaccinationsResponseType } from "../model/GetVaccinationsResponseType"
import { RemoveVaccinationResponseType } from "../model/RemoveVaccinationResponseType"
import { VaccineInjection } from "../model/VaccineInjection"

export class fhcVaccinnetApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary addVaccinations
   * @param body injections
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param patientId patientId
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param hcpQuality hcpQuality
   * @param hcpSupervisorNihii hcpSupervisorNihii
   * @param hcpSupervisorName hcpSupervisorName
   * @param hcpSupervisorQuality hcpSupervisorQuality
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientDateOfBirth patientDateOfBirth
   * @param softwareId softwareId
   * @param vaccinnetId vaccinnetId
   */
  addVaccinationsUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    patientId: string,
    hcpNihii: string,
    hcpName: string,
    hcpQuality: string,
    hcpSupervisorNihii: string,
    hcpSupervisorName: string,
    hcpSupervisorQuality: string,
    patientFirstName: string,
    patientLastName: string,
    patientDateOfBirth: number,
    softwareId: string,
    vaccinnetId: string,
    body?: Array<VaccineInjection>
  ): Promise<AddVaccinationsResponseType> {
    let _body = null
    _body = body

    const _url =
      this.host +
      `/vaccinnet/${encodeURIComponent(String(patientId))}` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (hcpQuality ? "&hcpQuality=" + encodeURIComponent(String(hcpQuality)) : "") +
      (hcpSupervisorNihii
        ? "&hcpSupervisorNihii=" + encodeURIComponent(String(hcpSupervisorNihii))
        : "") +
      (hcpSupervisorName
        ? "&hcpSupervisorName=" + encodeURIComponent(String(hcpSupervisorName))
        : "") +
      (hcpSupervisorQuality
        ? "&hcpSupervisorQuality=" + encodeURIComponent(String(hcpSupervisorQuality))
        : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientDateOfBirth
        ? "&patientDateOfBirth=" + encodeURIComponent(String(patientDateOfBirth))
        : "") +
      (softwareId ? "&softwareId=" + encodeURIComponent(String(softwareId)) : "") +
      (vaccinnetId ? "&vaccinnetId=" + encodeURIComponent(String(vaccinnetId)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new AddVaccinationsResponseType(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary getVaccinations
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param patientId patientId
   * @param softwareId softwareId
   * @param vaccinnetId vaccinnetId
   * @param since since
   */
  getVaccinationsUsingGET(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    patientId: string,
    softwareId: string,
    vaccinnetId: string,
    since: number
  ): Promise<GetVaccinationsResponseType> {
    let _body = null

    const _url =
      this.host +
      `/vaccinnet/${encodeURIComponent(String(patientId))}` +
      "?ts=" +
      new Date().getTime() +
      (softwareId ? "&softwareId=" + encodeURIComponent(String(softwareId)) : "") +
      (vaccinnetId ? "&vaccinnetId=" + encodeURIComponent(String(vaccinnetId)) : "") +
      (since ? "&since=" + encodeURIComponent(String(since)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new GetVaccinationsResponseType(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary removeVaccination
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param patientId patientId
   * @param vaccinationId vaccinationId
   * @param softwareId softwareId
   * @param vaccinnetId vaccinnetId
   */
  removeVaccinationUsingDELETE(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    patientId: string,
    vaccinationId: string,
    softwareId: string,
    vaccinnetId: string
  ): Promise<RemoveVaccinationResponseType> {
    let _body = null

    const _url =
      this.host +
      `/vaccinnet/${encodeURIComponent(String(patientId))}/${encodeURIComponent(
        String(vaccinationId)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (softwareId ? "&softwareId=" + encodeURIComponent(String(softwareId)) : "") +
      (vaccinnetId ? "&vaccinnetId=" + encodeURIComponent(String(vaccinnetId)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new RemoveVaccinationResponseType(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
