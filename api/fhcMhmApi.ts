/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { CancelSubscriptionResultWithResponse } from "../model/CancelSubscriptionResultWithResponse"
import { EndSubscriptionResultWithResponse } from "../model/EndSubscriptionResultWithResponse"
import { StartSubscriptionResultWithResponse } from "../model/StartSubscriptionResultWithResponse"

export class fhcMhmApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary cancelSubscription
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param reference reference
   * @param patientSsin patientSsin
   * @param io io
   * @param ioMembership ioMembership
   */
  cancelSubscriptionUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    reference: string,
    patientSsin?: string,
    io?: string,
    ioMembership?: string
  ): Promise<CancelSubscriptionResultWithResponse> {
    let _body = null

    const _url =
      this.host +
      `/mhm/cancelSubscription` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (reference ? "&reference=" + encodeURIComponent(String(reference)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (io ? "&io=" + encodeURIComponent(String(io)) : "") +
      (ioMembership ? "&ioMembership=" + encodeURIComponent(String(ioMembership)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new CancelSubscriptionResultWithResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary notifySubscriptionClosure
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param reference reference
   * @param endDate endDate
   * @param reason reason
   * @param decisionType decisionType
   * @param patientSsin patientSsin
   * @param io io
   * @param ioMembership ioMembership
   */
  notifySubscriptionClosureUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    reference: string,
    endDate: number,
    reason: string,
    decisionType: string,
    patientSsin?: string,
    io?: string,
    ioMembership?: string
  ): Promise<EndSubscriptionResultWithResponse> {
    let _body = null

    const _url =
      this.host +
      `/mhm/notifySubscriptionClosure` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (reference ? "&reference=" + encodeURIComponent(String(reference)) : "") +
      (endDate ? "&endDate=" + encodeURIComponent(String(endDate)) : "") +
      (reason ? "&reason=" + encodeURIComponent(String(reason)) : "") +
      (decisionType ? "&decisionType=" + encodeURIComponent(String(decisionType)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (io ? "&io=" + encodeURIComponent(String(io)) : "") +
      (ioMembership ? "&ioMembership=" + encodeURIComponent(String(ioMembership)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new EndSubscriptionResultWithResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary sendSubscription
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param startDate startDate
   * @param signatureType signatureType
   * @param isTrial isTrial
   * @param patientSsin patientSsin
   * @param io io
   * @param ioMembership ioMembership
   * @param isRecovery isRecovery
   * @param isTestForNotify isTestForNotify
   */
  sendSubscriptionUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    startDate: number,
    signatureType: string,
    isTrial?: boolean,
    patientSsin?: string,
    io?: string,
    ioMembership?: string,
    isRecovery?: boolean,
    isTestForNotify?: boolean
  ): Promise<StartSubscriptionResultWithResponse> {
    let _body = null

    const _url =
      this.host +
      `/mhm/sendSubscription` +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (startDate ? "&startDate=" + encodeURIComponent(String(startDate)) : "") +
      (signatureType ? "&signatureType=" + encodeURIComponent(String(signatureType)) : "") +
      (isTrial ? "&isTrial=" + encodeURIComponent(String(isTrial)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (io ? "&io=" + encodeURIComponent(String(io)) : "") +
      (ioMembership ? "&ioMembership=" + encodeURIComponent(String(ioMembership)) : "") +
      (isRecovery ? "&isRecovery=" + encodeURIComponent(String(isRecovery)) : "") +
      (isTestForNotify ? "&isTestForNotify=" + encodeURIComponent(String(isTestForNotify)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new StartSubscriptionResultWithResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
